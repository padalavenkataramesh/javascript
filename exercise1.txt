
- scope examples
(function() {
   var a = b = 5;
})();

console.log(b);

o/p: 5

(function() {
   'use strict';
   var a = window.b = 5;
})();

console.log(b);

o/p: 5

create 'native' methods example
------------
console.log('hello'.repeatify(3));

should be print  'hellohellohello'

output below code:

String.prototype.repeatify = String.prototype.repeatify || function(times) {
   var str = '';

   for (var i = 0; i < times; i++) {
      str += this;
   }

   return str;
};

Hoisting: Hoisting is the JavaScript interpreter's action of moving all variable and function declarations to the top of the current scope. However, only the actual declarations are hoisted.

function test() {
   console.log(a);
   console.log(foo());
   
   var a = 1;
   function foo() {
      return 2;
   }
}

test();

o/p
undefined and 2

How this works in JavaScript

var fullname = 'John Doe';
var obj = {
   fullname: 'Colin Ihrig',
   prop: {
      fullname: 'Aurelio De Rosa',
      getFullname: function() {
         return this.fullname;
      }
   }
};

console.log(obj.prop.getFullname());

var test = obj.prop.getFullname;

console.log(test());

o/p: Aurelio De Rosa and John Doe




for more clarifications: https://www.sitepoint.com/5-typical-javascript-interview-exercises/
